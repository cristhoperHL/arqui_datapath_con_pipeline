$date
	Thu Nov 14 23:50:01 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module test $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 # writedata [31:0] $end
$var wire 1 $ zero_to_mux $end
$var wire 1 % zero $end
$var wire 5 & writereg [4:0] $end
$var wire 32 ' sign_extended [31:0] $end
$var wire 32 ( shift_left_branch [31:0] $end
$var wire 32 ) read_data2 [31:0] $end
$var wire 32 * read_data1 [31:0] $end
$var wire 32 + mux_branch_out [31:0] $end
$var wire 32 , mux_alu [31:0] $end
$var wire 32 - branch_pc [31:0] $end
$var wire 4 . alucontrol [3:0] $end
$var wire 32 / alu_result [31:0] $end
$var wire 32 0 address_final [31:0] $end
$var wire 1 1 RegWrite $end
$var wire 1 2 RegDst $end
$var wire 32 3 Out_PC [31:0] $end
$var wire 1 4 MemtoReg $end
$var wire 2 5 MemWrite [1:0] $end
$var wire 2 6 MemRead [1:0] $end
$var wire 32 7 Jump_address [31:0] $end
$var wire 1 8 Jump $end
$var wire 32 9 Instruction [31:0] $end
$var wire 32 : DM_out [31:0] $end
$var wire 32 ; DM_mux [31:0] $end
$var wire 1 < Branch $end
$var wire 1 = ALUsrc $end
$var wire 4 > ALUOP [3:0] $end
$scope module call_ALU $end
$var wire 32 ? entr2 [31:0] $end
$var wire 32 @ entr1 [31:0] $end
$var wire 4 A alu_ctrl [3:0] $end
$var reg 32 B alu_result [31:0] $end
$var reg 1 % zero $end
$upscope $end
$scope module call_Control $end
$var wire 6 C Instruction [5:0] $end
$var wire 1 ! clk $end
$var reg 4 D ALUOp [3:0] $end
$var reg 1 = ALUSrc $end
$var reg 1 < Branch $end
$var reg 1 8 Jump $end
$var reg 2 E MemRead [1:0] $end
$var reg 2 F MemWrite [1:0] $end
$var reg 1 4 MemtoReg $end
$var reg 1 2 RegDst $end
$var reg 1 1 RegWrite $end
$upscope $end
$scope module call_IM $end
$var wire 32 G pc [31:0] $end
$var reg 32 H out [31:0] $end
$upscope $end
$scope module call_RF $end
$var wire 1 ! clk $end
$var wire 5 I readreg1 [4:0] $end
$var wire 5 J readreg2 [4:0] $end
$var wire 1 1 regwrite $end
$var wire 32 K writedata [31:0] $end
$var wire 5 L writereg [4:0] $end
$var reg 32 M read_data1 [31:0] $end
$var reg 32 N read_data2 [31:0] $end
$upscope $end
$scope module call_Signextend $end
$var wire 16 O a [15:0] $end
$var reg 32 P b [31:0] $end
$upscope $end
$scope module call_adder $end
$var wire 32 Q y [31:0] $end
$var wire 32 R b [31:0] $end
$var wire 32 S a [31:0] $end
$upscope $end
$scope module call_adder_pc $end
$var wire 32 T pc [31:0] $end
$var reg 32 U pc_add [31:0] $end
$upscope $end
$scope module call_alu_control $end
$var wire 4 V aluOp [3:0] $end
$var wire 6 W func [5:0] $end
$var reg 4 X out [3:0] $end
$upscope $end
$scope module call_and $end
$var wire 1 < a $end
$var wire 1 % b $end
$var wire 1 $ out $end
$upscope $end
$scope module call_data_memory $end
$var wire 32 Y address [31:0] $end
$var wire 1 ! clk $end
$var wire 2 Z memread [1:0] $end
$var wire 2 [ memwrite [1:0] $end
$var wire 32 \ writedata [31:0] $end
$var reg 32 ] read_data [31:0] $end
$upscope $end
$scope module call_mux2_1_5bits $end
$var wire 5 ^ a [4:0] $end
$var wire 5 _ b [4:0] $end
$var wire 1 2 sel $end
$var wire 5 ` out [4:0] $end
$upscope $end
$scope module call_mux2_1_branch $end
$var wire 32 a b [31:0] $end
$var wire 1 $ sel $end
$var wire 32 b out [31:0] $end
$var wire 32 c a [31:0] $end
$upscope $end
$scope module call_mux_data_memory $end
$var wire 32 d a [31:0] $end
$var wire 32 e b [31:0] $end
$var wire 1 4 sel $end
$var wire 32 f out [31:0] $end
$upscope $end
$scope module call_pc $end
$var wire 1 ! clk $end
$var wire 32 g d [31:0] $end
$var wire 1 " reset $end
$var reg 32 h q [31:0] $end
$upscope $end
$scope module call_shift_branch $end
$var wire 32 i imm [31:0] $end
$var reg 32 j branch_address [31:0] $end
$upscope $end
$scope module call_shift_jump $end
$var wire 4 k PC [3:0] $end
$var wire 26 l imm [25:0] $end
$var reg 32 m jump [31:0] $end
$var reg 2 n shift [1:0] $end
$upscope $end
$scope module mux_antes_del_alu $end
$var wire 32 o a [31:0] $end
$var wire 32 p b [31:0] $end
$var wire 1 q sel $end
$var wire 32 r out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 r
1q
bx p
b1 o
b0 n
b1000010000000000000000000100 m
b10000100000000000000000001 l
b0 k
b100 j
b1 i
b0 h
b100 g
bx f
bx e
bx d
b0 c
b100 b
b100 a
b0 `
b0 _
b10000 ^
bx ]
bx \
b0 [
b0 Z
bx Y
b0 X
b1 W
b100 V
b100 U
b0 T
b0 S
b100 R
b100 Q
b1 P
b1 O
bx N
bx M
b0 L
bz K
b10000 J
b10000 I
b100010000100000000000000000001 H
b0 G
b0 F
b0 E
b100 D
b1000 C
bx B
b0 A
bx @
b1 ?
b100 >
1=
0<
bx ;
bx :
b100010000100000000000000000001 9
08
b1000010000000000000000000100 7
b0 6
b0 5
04
b0 3
02
11
b100 0
bx /
b0 .
b100 -
b1 ,
b100 +
bx *
bx )
b100 (
b1 '
b0 &
0%
0$
bz #
1"
1!
$end
#1
0"
0!
#2
b1000 0
b1000 U
b1000 g
b1 ;
b1 f
b1 /
b1 B
b1 Y
b1 e
b1000 +
b1000 b
b0 )
b0 N
b0 \
b0 p
b0 *
b0 @
b0 M
b1000 -
b1000 Q
b1000 a
b100 3
b100 G
b100 S
b100 T
b100 c
b100 h
1!
#3
0!
#4
b1000 (
b1000 R
b1000 j
b10 ;
b10 f
b10 /
b10 B
b10 Y
b10 e
b10 ,
b10 ?
b10 r
b1000110001000000000000001000 7
b1000110001000000000000001000 m
b10 '
b10 P
b10 i
b10 o
b10001100010000000000000010 l
b10 W
b10 O
b10001 J
b10001 I
b10001 ^
b100010001100010000000000000010 9
b100010001100010000000000000010 H
b1100 0
b1100 U
b1100 g
b10000 +
b10000 b
b10000 -
b10000 Q
b10000 a
b1000 3
b1000 G
b1000 S
b1000 T
b1000 c
b1000 h
1!
#5
0!
#6
b10000000010000000 (
b10000000010000000 R
b10000000010000000 j
b100000000100000 ;
b100000000100000 f
b100000000100000 /
b100000000100000 B
b100000000100000 Y
b100000000100000 e
b100000000100000 ,
b100000000100000 ?
b100000000100000 r
b100000000010000000010000000 7
b100000000010000000010000000 m
b100000000100000 '
b100000000100000 P
b100000000100000 i
b100000000100000 o
0=
b0 >
b0 D
b0 V
12
b1000000000100000000100000 l
b100000 W
b100000000100000 O
b0 J
b1000 I
b1000 _
b0 ^
b0 C
b1000000000100000000100000 9
b1000000000100000000100000 H
b10000 0
b10000 U
b10000 g
b10000000010001100 +
b10000000010001100 b
b10000000010001100 -
b10000000010001100 Q
b10000000010001100 a
b1100 3
b1100 G
b1100 S
b1100 T
b1100 c
b1100 h
1!
#7
0!
#8
1$
1%
b0 (
b0 R
b0 j
b110 .
b110 A
b110 X
b0 ;
b0 f
b0 /
b0 B
b0 Y
b0 e
b0 ,
b0 ?
b0 r
b100000000000000000000000000 7
b100000000000000000000000000 m
b0 '
b0 P
b0 i
b0 o
1=
b101 >
b101 D
b101 V
1<
02
b1000000000000000000000000 l
b0 W
b0 O
b0 _
b100 C
b10001000000000000000000000000 9
b10001000000000000000000000000 H
b10100 0
b10100 U
b10100 g
b10000 +
b10000 b
b10 )
b10 N
b10 \
b10 p
b10000 -
b10000 Q
b10000 a
b10000 3
b10000 G
b10000 S
b10000 T
b10000 c
b10000 h
1!
#9
0!
#10
b10000 (
b10000 R
b10000 j
b111 .
b111 A
b111 X
1$
1%
b100 ,
b100 ?
b100 r
b100000000000000000000010000 7
b100000000000000000000010000 m
b100 '
b100 P
b100 i
b100 o
b111 >
b111 D
b111 V
b1000000000000000000000100 l
b100 W
b100 O
b101 C
b10101000000000000000000000100 9
b10101000000000000000000000100 H
b11000 0
b11000 U
b11000 g
b10100 +
b10100 b
b100100 -
b100100 Q
b100100 a
b10100 3
b10100 G
b10100 S
b10100 T
b10100 c
b10100 h
1!
#11
0!
#12
b100 (
b100 R
b100 j
b1 ,
b1 ?
b1 r
b1000010000000000000000000100 7
b1000010000000000000000000100 m
b1 '
b1 P
b1 i
b1 o
b10000100000000000000000001 l
b1 W
b1 O
b10000 J
b10000 I
b10000 ^
b111111 C
b11111110000100000000000000000001 9
b11111110000100000000000000000001 H
b11100 0
b11100 U
b11100 g
b11000 +
b11000 b
b11100 -
b11100 Q
b11100 a
b11000 3
b11000 G
b11000 S
b11000 T
b11000 c
b11000 h
1!
#13
0!
#14
b111111111011110 ;
b111111111011110 f
b111111111011110 /
b111111111011110 B
b111111111011110 Y
b111111111011110 e
b11111111111111100000000010001000 (
b11111111111111100000000010001000 R
b11111111111111100000000010001000 j
b1 .
b1 A
b1 X
b11111111111111111000000000100010 ,
b11111111111111111000000000100010 ?
b11111111111111111000000000100010 r
0$
b1000010001100000000010001000 7
b1000010001100000000010001000 m
b11111111111111111000000000100010 '
b11111111111111111000000000100010 P
b11111111111111111000000000100010 i
b11111111111111111000000000100010 o
b10001 &
b10001 L
b10001 `
0=
b0 >
b0 D
b0 V
0<
12
b10000100011000000000100010 l
b100010 W
b1000000000100010 O
b10001 J
b10000 _
b10001 ^
b0 C
b10000100011000000000100010 9
b10000100011000000000100010 H
b100000 0
b100000 U
b100000 g
b11111111111111100000000010100100 +
b11111111111111100000000010100100 b
b0 )
b0 N
b0 \
b0 p
b11111111111111100000000010100100 -
b11111111111111100000000010100100 Q
b11111111111111100000000010100100 a
b11100 3
b11100 G
b11100 S
b11100 T
b11100 c
b11100 h
1!
#15
0!
#16
bx00 (
bx00 R
bx00 j
bx ;
bx f
bx /
bx B
bx Y
bx e
bx ,
bx ?
bx r
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 7
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 m
bx '
bx P
bx i
bx o
bx &
bx L
bx `
bx l
bx W
bx O
bx J
bx I
bx _
bx ^
bx C
bx 9
bx H
b100100 0
b100100 U
b100100 g
bx +
bx b
bx -
bx Q
bx a
b100000 3
b100000 G
b100000 S
b100000 T
b100000 c
b100000 h
1!
#17
0!
