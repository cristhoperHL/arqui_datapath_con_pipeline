$date
	Thu Nov 28 15:10:38 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module test $end
$var wire 1 ! clk $end
$var wire 1 # forward_EN $end
$var wire 1 $ mem_to_reg_d_e $end
$var wire 1 % mem_to_reg_e_m $end
$var wire 1 " reset $end
$var wire 32 & writedata [31:0] $end
$var wire 1 ' zero_to_mux $end
$var wire 1 ( zero $end
$var wire 5 ) writereg [4:0] $end
$var wire 32 * val_2_mux_forw [31:0] $end
$var wire 32 + val_1_mux_forw [31:0] $end
$var wire 2 , val2 [1:0] $end
$var wire 2 - val1 [1:0] $end
$var wire 5 . src_2_f_d [4:0] $end
$var wire 5 / src_1_f_d [4:0] $end
$var wire 32 0 sign_extended [31:0] $end
$var wire 32 1 shift_left_branch_d_e [31:0] $end
$var wire 32 2 shift_left_branch [31:0] $end
$var wire 32 3 reg2_d_e [31:0] $end
$var wire 32 4 reg1_d_e [31:0] $end
$var wire 32 5 read_data2 [31:0] $end
$var wire 32 6 read_data1 [31:0] $end
$var wire 32 7 mux_reg2_imm_d_e [31:0] $end
$var wire 32 8 mux_branch_out [31:0] $end
$var wire 32 9 mux_alu [31:0] $end
$var wire 1 : jump_d_e $end
$var wire 32 ; inst_F_D [31:0] $end
$var wire 1 < hazard_detected $end
$var wire 5 = dest_e_m [4:0] $end
$var wire 5 > dest_d_e [4:0] $end
$var wire 32 ? branch_pc [31:0] $end
$var wire 1 @ branch_d_e $end
$var wire 4 A alucontrol_d_e [3:0] $end
$var wire 4 B alucontrol [3:0] $end
$var wire 32 C alu_result [31:0] $end
$var wire 32 D address_final [31:0] $end
$var wire 1 E RegWrite $end
$var wire 1 F RegDst $end
$var wire 32 G PC_F_D [31:0] $end
$var wire 32 H Out_PC [31:0] $end
$var wire 1 I MemtoReg_e_m $end
$var wire 1 J MemtoReg_d_e $end
$var wire 1 K MemtoReg $end
$var wire 2 L MemWrite_e_m [1:0] $end
$var wire 2 M MemWrite_d_e [1:0] $end
$var wire 2 N MemWrite [1:0] $end
$var wire 2 O MemRead_e_m [1:0] $end
$var wire 2 P MemRead_d_e [1:0] $end
$var wire 2 Q MemRead [1:0] $end
$var wire 32 R Jump_address_d_e [31:0] $end
$var wire 32 S Jump_address [31:0] $end
$var wire 1 T Jump $end
$var wire 32 U Instruction [31:0] $end
$var wire 32 V DM_out [31:0] $end
$var wire 32 W DM_mux [31:0] $end
$var wire 1 X Branch $end
$var wire 1 Y ALUsrc $end
$var wire 4 Z ALUOP [3:0] $end
$scope module ID_IE $end
$var wire 1 ! clk $end
$var wire 5 [ dest_in [4:0] $end
$var wire 1 " rst $end
$var wire 5 \ src_1 [4:0] $end
$var wire 5 ] src_2 [4:0] $end
$var wire 32 ^ shift_left_branch_in [31:0] $end
$var wire 32 _ out_mux_reg_2_o_imm_in [31:0] $end
$var wire 4 ` alu_control_out_in [3:0] $end
$var wire 32 a Reg2_in [31:0] $end
$var wire 32 b Reg1_in [31:0] $end
$var wire 1 K MemtoReg_in $end
$var wire 2 c MemWrite_in [1:0] $end
$var wire 2 d MemRead_in [1:0] $end
$var wire 1 T Jump_in $end
$var wire 32 e Jump_address_in [31:0] $end
$var wire 1 X Branch_in $end
$var reg 1 @ Branch_out $end
$var reg 32 f Jump_address_out [31:0] $end
$var reg 1 : Jump_out $end
$var reg 2 g MemRead_out [1:0] $end
$var reg 2 h MemWrite_out [1:0] $end
$var reg 1 J MemtoReg_out $end
$var reg 32 i Reg1_out [31:0] $end
$var reg 32 j Reg2_out [31:0] $end
$var reg 4 k alu_control_out_out [3:0] $end
$var reg 5 l dest_out [4:0] $end
$var reg 32 m out_mux_reg_2_o_imm_out [31:0] $end
$var reg 32 n shift_left_branch_out [31:0] $end
$var reg 5 o src_1_out [4:0] $end
$var reg 5 p src_2_out [4:0] $end
$upscope $end
$scope module call_3_forwarding_1 $end
$var wire 32 q Reg1 [31:0] $end
$var wire 2 r signal_forwarding [1:0] $end
$var wire 32 s result [31:0] $end
$var wire 32 t WB_result [31:0] $end
$var wire 32 u Alu_result [31:0] $end
$upscope $end
$scope module call_3_forwarding_2 $end
$var wire 32 v Reg1 [31:0] $end
$var wire 2 w signal_forwarding [1:0] $end
$var wire 32 x result [31:0] $end
$var wire 32 y WB_result [31:0] $end
$var wire 32 z Alu_result [31:0] $end
$upscope $end
$scope module call_ALU $end
$var wire 4 { alu_ctrl [3:0] $end
$var wire 32 | entr1 [31:0] $end
$var wire 32 } entr2 [31:0] $end
$var reg 32 ~ alu_result [31:0] $end
$var reg 1 ( zero $end
$upscope $end
$scope module call_Control $end
$var wire 6 !" Instruction [5:0] $end
$var wire 1 ! clk $end
$var wire 1 < hazard_detected $end
$var reg 4 "" ALUOp [3:0] $end
$var reg 1 Y ALUSrc $end
$var reg 1 X Branch $end
$var reg 1 T Jump $end
$var reg 2 #" MemRead [1:0] $end
$var reg 2 $" MemWrite [1:0] $end
$var reg 1 K MemtoReg $end
$var reg 1 F RegDst $end
$var reg 1 E RegWrite $end
$upscope $end
$scope module call_F_D $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 %" instructionIn [31:0] $end
$var wire 1 < STALL $end
$var wire 32 &" PCIn [31:0] $end
$var reg 32 '" PC [31:0] $end
$var reg 32 (" instruction [31:0] $end
$upscope $end
$scope module call_IM $end
$var wire 32 )" pc [31:0] $end
$var reg 32 *" out [31:0] $end
$upscope $end
$scope module call_RF $end
$var wire 1 ! clk $end
$var wire 5 +" readreg1 [4:0] $end
$var wire 5 ," readreg2 [4:0] $end
$var wire 1 E regwrite $end
$var wire 32 -" writedata [31:0] $end
$var wire 5 ." writereg [4:0] $end
$var reg 32 /" read_data1 [31:0] $end
$var reg 32 0" read_data2 [31:0] $end
$upscope $end
$scope module call_Signextend $end
$var wire 16 1" a [15:0] $end
$var reg 32 2" b [31:0] $end
$upscope $end
$scope module call_adder $end
$var wire 32 3" y [31:0] $end
$var wire 32 4" b [31:0] $end
$var wire 32 5" a [31:0] $end
$upscope $end
$scope module call_adder_pc $end
$var wire 32 6" pc [31:0] $end
$var reg 32 7" pc_add [31:0] $end
$upscope $end
$scope module call_alu_control $end
$var wire 4 8" aluOp [3:0] $end
$var wire 6 9" func [5:0] $end
$var reg 4 :" out [3:0] $end
$upscope $end
$scope module call_and $end
$var wire 1 @ a $end
$var wire 1 ( b $end
$var wire 1 ' out $end
$upscope $end
$scope module call_data_memory $end
$var wire 32 ;" address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 <" writedata [31:0] $end
$var wire 2 =" memwrite [1:0] $end
$var wire 2 >" memread [1:0] $end
$var reg 32 ?" read_data [31:0] $end
$upscope $end
$scope module call_ex_mem $end
$var wire 1 ! clk $end
$var wire 5 @" dest [4:0] $end
$var wire 2 A" memread [1:0] $end
$var wire 1 J memtoreg $end
$var wire 2 B" memwrite [1:0] $end
$var wire 1 " rst $end
$var reg 5 C" dest_out [4:0] $end
$var reg 2 D" memread_out [1:0] $end
$var reg 1 I memtoreg_out $end
$var reg 2 E" memwrite_out [1:0] $end
$upscope $end
$scope module call_forwarding $end
$var wire 1 $ WB_EN_MEM $end
$var wire 1 % WB_EN_WB $end
$var wire 5 F" dest_MEM [4:0] $end
$var wire 5 G" dest_WB [4:0] $end
$var wire 5 H" src1_d_e [4:0] $end
$var wire 5 I" src2_d_e [4:0] $end
$var reg 2 J" val1_sel [1:0] $end
$var reg 2 K" val2_sel [1:0] $end
$upscope $end
$scope module call_hazard $end
$var wire 1 Y alu_src $end
$var wire 5 L" dest_d_e [4:0] $end
$var wire 5 M" dest_e_m [4:0] $end
$var wire 1 N" exe_hazard $end
$var wire 1 # forward_EN $end
$var wire 1 O" hazard $end
$var wire 1 P" mem_hazard $end
$var wire 1 $ mem_to_reg_d_e $end
$var wire 1 % mem_to_reg_e_m $end
$var wire 5 Q" src1_ID [4:0] $end
$var wire 5 R" src2_ID [4:0] $end
$var wire 1 S" src2_is_valid $end
$var wire 1 < hazard_detected $end
$upscope $end
$scope module call_mux2_1_5bits $end
$var wire 5 T" a [4:0] $end
$var wire 5 U" b [4:0] $end
$var wire 1 F sel $end
$var wire 5 V" out [4:0] $end
$upscope $end
$scope module call_mux2_1_branch $end
$var wire 32 W" a [31:0] $end
$var wire 32 X" b [31:0] $end
$var wire 1 ' sel $end
$var wire 32 Y" out [31:0] $end
$upscope $end
$scope module call_mux_data_memory $end
$var wire 32 Z" a [31:0] $end
$var wire 32 [" b [31:0] $end
$var wire 1 J sel $end
$var wire 32 \" out [31:0] $end
$upscope $end
$scope module call_pc $end
$var wire 1 ! clk $end
$var wire 32 ]" d [31:0] $end
$var wire 1 " reset $end
$var reg 32 ^" q [31:0] $end
$upscope $end
$scope module call_shift_branch $end
$var wire 32 _" imm [31:0] $end
$var reg 32 `" branch_address [31:0] $end
$upscope $end
$scope module call_shift_jump $end
$var wire 4 a" PC [3:0] $end
$var wire 26 b" imm [25:0] $end
$var reg 32 c" jump [31:0] $end
$var reg 2 d" shift [1:0] $end
$upscope $end
$scope module mux_antes_del_alu $end
$var wire 32 e" a [31:0] $end
$var wire 32 f" b [31:0] $end
$var wire 1 Y sel $end
$var wire 32 g" out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx g"
bx f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b100 ]"
b0 \"
b0 ["
bx Z"
b100 Y"
b100 X"
b100 W"
b0 V"
b0 U"
b0 T"
0S"
b0 R"
b0 Q"
xP"
xO"
xN"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
bx ?"
b0 >"
b0 ="
bx <"
b0 ;"
bx :"
b0 9"
b0 8"
b100 7"
b0 6"
b100 5"
b0 4"
b100 3"
b0 2"
b0 1"
bx 0"
bx /"
b0 ."
bz -"
b10010 ,"
b1010 +"
b1010100100100100000100000 *"
b0 )"
b0 ("
b0 '"
b100 &"
b1010100100100100000100000 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
bx b
bx a
bx `
bx _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
0Y
0X
b0 W
bx V
b1010100100100100000100000 U
0T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
0K
0J
0I
b0 H
b0 G
1F
1E
b100 D
b0 C
bx B
b0 A
0@
b100 ?
b0 >
b0 =
x<
b0 ;
0:
bx 9
b100 8
b0 7
bx 6
bx 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
0'
bz &
z%
z$
z#
1"
1!
$end
#1
0"
0!
#2
b10001 ,"
b1001 +"
b10010000010001000 8
b10010000010001000 Y"
b10010000010000000 2
b10010000010000000 ^
b10010000010000000 4"
b10010000010000000 `"
b0 B
b0 `
b0 :"
b1001100010101100000100000 U
b1001100010101100000100000 %"
b1001100010101100000100000 *"
b10010000010001000 ?
b10010000010001000 3"
b10010000010001000 X"
b1000 D
b1000 &"
b1000 5"
b1000 7"
b1000 W"
b1000 ]"
0<
0O"
0N"
0P"
b101010010010010000010000000 S
b101010010010010000010000000 e
b101010010010010000010000000 c"
b100100000100000 0
b100100000100000 2"
b100100000100000 _"
b100100000100000 e"
b10010 )
b10010 ."
b10010 V"
bx *
bx x
bx }
bx +
bx s
bx |
b0 9
b0 _
b0 g"
b10010 I"
b1010 H"
b1001 [
b10010 ]
b1010 \
b1010100100100100000100000 b"
b100000 9"
b100100000100000 1"
b1001 U"
b10010 T"
b10010 R"
b1010 Q"
bx A
bx k
bx {
b0xxxx 7
b0xxxx m
bx 3
bx j
bx v
bx 4
bx i
bx q
b0 5
b0 a
b0 0"
b0 <"
b0 f"
b111 6
b111 b
b111 /"
b100 G
b100 '"
b1010100100100100000100000 ;
b1010100100100100000100000 ("
b100 H
b100 )"
b100 6"
b100 ^"
1!
#3
0!
#4
b10011 ,"
b10000 +"
b10110000010001100 8
b10110000010001100 Y"
b10110000010000000 2
b10110000010000000 ^
b10110000010000000 4"
b10110000010000000 `"
b10000100111000000000100010 U
b10000100111000000000100010 %"
b10000100111000000000100010 *"
b10110000010001100 ?
b10110000010001100 3"
b10110000010001100 X"
b1100 D
b1100 &"
b1100 5"
b1100 7"
b1100 W"
b1100 ]"
x<
xO"
xN"
b100110001010110000010000000 S
b100110001010110000010000000 e
b100110001010110000010000000 c"
b101100000100000 0
b101100000100000 2"
b101100000100000 _"
b101100000100000 e"
b10001 )
b10001 ."
b10001 V"
b111 W
b111 t
b111 y
b111 \"
b10001 I"
b1001 H"
b1011 [
b10001 ]
b1001 \
b1001100010101100000100000 b"
b101100000100000 1"
b1011 U"
b10001 T"
b10001 R"
b1001 Q"
b111 C
b111 u
b111 z
b111 ~
b111 ;"
b111 ["
b0 *
b0 x
b0 }
b111 +
b111 s
b111 |
b1000 G
b1000 '"
b1001100010101100000100000 ;
b1001100010101100000100000 ("
b100000 6
b100000 b
b100000 /"
b10010000010000000 1
b10010000010000000 n
b101010010010010000010000000 R
b101010010010010000010000000 f
b0 A
b0 k
b0 {
b0 7
b0 m
b1001 >
b1001 l
b1001 @"
b1001 F"
b1001 L"
b0 3
b0 j
b0 v
b111 4
b111 i
b111 q
b10010 .
b10010 p
b1010 /
b1010 o
b1000 H
b1000 )"
b1000 6"
b1000 ^"
1!
#5
0!
#6
b10100 ,"
b10100 +"
b11111111111111100000000010011000 8
b11111111111111100000000010011000 Y"
b11111111111111100000000010001000 2
b11111111111111100000000010001000 ^
b11111111111111100000000010001000 4"
b11111111111111100000000010001000 `"
b1 B
b1 `
b1 :"
b100010100101000000000000000001 U
b100010100101000000000000000001 %"
b100010100101000000000000000001 *"
b11111111111111100000000010011000 ?
b11111111111111100000000010011000 3"
b11111111111111100000000010011000 X"
b10000 D
b10000 &"
b10000 5"
b10000 7"
b10000 W"
b10000 ]"
0<
0O"
b100000 W
b100000 t
b100000 y
b100000 \"
0N"
b100000 C
b100000 u
b100000 z
b100000 ~
b100000 ;"
b100000 ["
b1000010011100000000010001000 S
b1000010011100000000010001000 e
b1000010011100000000010001000 c"
b11111111111111111000000000100010 0
b11111111111111111000000000100010 2"
b11111111111111111000000000100010 _"
b11111111111111111000000000100010 e"
b10011 )
b10011 ."
b10011 V"
b100000 +
b100000 s
b100000 |
b10011 I"
b10000 H"
b10000 [
b10011 ]
b10000 \
b10000100111000000000100010 b"
b100010 9"
b1000000000100010 1"
b10000 U"
b10011 T"
b10011 R"
b10000 Q"
b1001 =
b1001 C"
b1001 G"
b1001 M"
b10110000010000000 1
b10110000010000000 n
b100110001010110000010000000 R
b100110001010110000010000000 f
b1011 >
b1011 l
b1011 @"
b1011 F"
b1011 L"
b100000 4
b100000 i
b100000 q
b10001 .
b10001 p
b1001 /
b1001 o
b0 6
b0 b
b0 /"
b1100 G
b1100 '"
b10000100111000000000100010 ;
b10000100111000000000100010 ("
b1100 H
b1100 )"
b1100 6"
b1100 ^"
1!
#7
0!
#8
bx ,"
bx +"
b11000 8
b11000 Y"
b100 2
b100 ^
b100 4"
b100 `"
b0 B
b0 `
b0 :"
bx U
bx %"
bx *"
b11000 ?
b11000 3"
b11000 X"
b10100 D
b10100 &"
b10100 5"
b10100 7"
b10100 W"
b10100 ]"
b1 9
b1 _
b1 g"
0<
0O"
b1010010100000000000000000100 S
b1010010100000000000000000100 e
b1010010100000000000000000100 c"
b1 0
b1 2"
b1 _"
b1 e"
b0 )
b0 ."
b0 V"
1S"
1Y
b100 Z
b100 ""
b100 8"
0F
b0 W
b0 t
b0 y
b0 \"
0N"
b10100 I"
b10100 H"
b0 [
b10100 ]
b10100 \
b10100101000000000000000001 b"
b1 9"
b1 1"
b0 U"
b10100 T"
b1000 !"
b10100 R"
b10100 Q"
b0 C
b0 u
b0 z
b0 ~
b0 ;"
b0 ["
b0 +
b0 s
b0 |
b10000 G
b10000 '"
b100010100101000000000000000001 ;
b100010100101000000000000000001 ("
b11111111111111100000000010001000 1
b11111111111111100000000010001000 n
b1000010011100000000010001000 R
b1000010011100000000010001000 f
b1 A
b1 k
b1 {
b1 7
b1 m
b10000 >
b10000 l
b10000 @"
b10000 F"
b10000 L"
b0 4
b0 i
b0 q
b10011 .
b10011 p
b10000 /
b10000 o
b1011 =
b1011 C"
b1011 G"
b1011 M"
b10000 H
b10000 )"
b10000 6"
b10000 ^"
1!
#9
0!
#10
bx 8
bx Y"
bx00 2
bx00 ^
bx00 4"
bx00 `"
bx ?
bx 3"
bx X"
b11000 D
b11000 &"
b11000 5"
b11000 7"
b11000 W"
b11000 ]"
x<
xO"
bx 9
bx _
bx g"
xN"
xP"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 S
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 e
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 c"
bx 0
bx 2"
bx _"
bx e"
bx )
bx ."
bx V"
bx I"
bx H"
bx [
bx ]
bx \
bx b"
bx 9"
bx 1"
bx U"
bx T"
bx !"
bx R"
bx Q"
b10000 =
b10000 C"
b10000 G"
b10000 M"
b100 1
b100 n
b1010010100000000000000000100 R
b1010010100000000000000000100 f
b0 A
b0 k
b0 {
b0 7
b0 m
b0 >
b0 l
b0 @"
b0 F"
b0 L"
b10100 .
b10100 p
b10100 /
b10100 o
bx 5
bx a
bx 0"
bx <"
bx f"
bx 6
bx b
bx /"
b10100 G
b10100 '"
bx ;
bx ("
b10100 H
b10100 )"
b10100 6"
b10100 ^"
1!
#11
0!
#12
b11100 D
b11100 &"
b11100 5"
b11100 7"
b11100 W"
b11100 ]"
bx W
bx t
bx y
bx \"
bx C
bx u
bx z
bx ~
bx ;"
bx ["
bx *
bx x
bx }
bx +
bx s
bx |
b11000 G
b11000 '"
bx00 1
bx00 n
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 R
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 f
bx >
bx l
bx @"
bx F"
bx L"
bx 3
bx j
bx v
bx 4
bx i
bx q
bx .
bx p
bx /
bx o
b0 =
b0 C"
b0 G"
b0 M"
b11000 H
b11000 )"
b11000 6"
b11000 ^"
1!
#13
0!
#14
b100000 D
b100000 &"
b100000 5"
b100000 7"
b100000 W"
b100000 ]"
bx =
bx C"
bx G"
bx M"
b11100 G
b11100 '"
b11100 H
b11100 )"
b11100 6"
b11100 ^"
1!
#15
0!
#16
b100100 D
b100100 &"
b100100 5"
b100100 7"
b100100 W"
b100100 ]"
b100000 G
b100000 '"
b100000 H
b100000 )"
b100000 6"
b100000 ^"
1!
#17
0!
